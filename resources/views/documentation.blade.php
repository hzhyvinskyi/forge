@extends('layouts.master')
@section('content')
    <div class="col-md-12 content">
        <h1 class="page-title" align="center">Documentation</h1>
        <hr><br>
        <h3 class="page-title">1. Posts controller</h3>
        <div class="documentation__method-item">
            <h4>1.1 index</h4>
            <p>Передаёт данные о всем постам или о постам по категориям в главную вьюху галлереи</p>
            <p>
                Использует компонент Eloquent чтобы получить обьекты записей из базы данных, и метод paginate для
                удобного их представления.
            </p>
            <p>
                Принимает: один необязательный параметр - id категории, для отображения постов только из этой категории.
            </p>
            <p>Возвращает коллекцию постов.</p>
        </div>
        <div class="documentation__method-item">
            <h4>1.2 show</h4>
            <p>Передаёт данные о выбранном посте на страницу одного поста</p>
            <p>Использует компонент Eloquent чтобы обьект одной записы из базы данных по его id</p>
            <p>Принимает: один обязательный параметр - id поста, чтобы его возможно было идентифицировать</p>
            <p>Возвращает: обьект одного поста.</p>
        </div>
        <div  class="documentation__method-item">
            <h4>1.3 create</h4>
            <p>Рендерит вьюху для создания поста.</p>
            <p>Принимает: -</p>
            <p>
                Возвращает: данные о всех категориях, для использования их в представлении. Делается это благодаря
                Eloquent-методу - all(), который используется в методе контроллера - getAllCategories().
            </p>
        </div>
        <div  class="documentation__method-item">
            <h4>1.4 store</h4>
            <p>Сохраняет данные из формы, введённые пользователем, в базу данных</p>
            <p>
                Исполузует данные из request, под который создан отдельный класс, где происходит валидация данных с
                помощью компонента Validation.
                Для сохранения данних в бд, использует Eloquent-метод save().
            </p>
            <p>Принимает: экземпляр класса-request - CreatePost $request.</p>
            <p>
                По завершению создания поста редиректит на страницу всех постов функцией redirect().
            </p>
        </div>
        <div  class="documentation__method-item">
            <h4>1.5 edit</h4>
            <p>Рендерит вьюху для редактирования поста с выводом данных из бд</p>
            <p>
                Для поиска нужного поста использует Eloquent-метод find()
            </p>
            <p>Принимает id поста</p>
            <p>
                Возвращает во вьюху обьект поста.
            </p>
        </div>
        <div  class="documentation__method-item">
            <h4>1.6 update</h4>
            <p>
                Из провалидированных данных request'а формирует массив, данных которого записывает в бд, через
                Eloquent-метод save(), предварительно находит нужную запись через метод Eloquent-метод find(), а также
                вызывается метод delete() класса Storage для удаления старого файла с диска.
            </p>
            <p>
                Исполузует данные из request, под который создан отдельный класс, где происходит валидация данных с
                помощью компонента Validation.
                Для сохранения данних в бд, использует Eloquent-метод save()
            </p>
            <p>Принимает два обязательных параметра: экземпляр класса-request - CreatePost $request и id поста</p>
            <p>
                По завершению апдейта поста редиректит на страницу этого поста.
            </p>
        </div>
        <div  class="documentation__method-item">
            <h4>1.7 delete</h4>
            <p>
                Удаляет пост из бд по полученному id и вызывает метод delete() класса Storage для удаления файла с диска
            </p>
            <p>
                Для удаления записи исполузует Eloquent-метод delete()
            </p>
            <p>Принимает один обязательный параметр - id поста</p>
            <p>
                После удаления поста редиректит на страницу всех постов.
            </p>
        </div>
        <div  class="documentation__method-item">
            <h4>1.8 getSavedFilename</h4>
            <p>
                Сохраняет файл на диск и возвращает его путь для дальнейшей записи в бд
            </p>
            <p>
                Использует метод store экземпляра класса UploadedFile
            </p>
            <p>Принимает один обязательный параметр - экземпляр класса UploadedFile</p>
            <p>
                Возвращает путь к файлу.
            </p>
        </div>
        <div  class="documentation__method-item">
            <h4>1.9 getAllCategories</h4>
            <p>
                Достаёт обьекты всех категории из бд. Для этого использует Eloquent-метод all().
            </p>
            <p>Принимает: -</p>
            <p>
                Возвращает коллекцию всех категорий.
            </p>
        </div>
        <hr><br>
        <h3>Компоненты</h3><br>
            {{--<h4>Routing, Requests, Middleware, Validation, Blade, Error Handling, Migrations, Factory, Helpers, Collections, Eloquent</h4>--}}
        <div  class="documentation__method-item">
            <h4>Routing</h4>
            <p>
                Отвечает за маршрутизацию. Выполняет функцию-замыкание либо перенаправляет на указанный метод
                контроллера, в зависимости от адреса.
            </p>
            <p>
                Используются методы:
                    1. Передачи данных: get, post.
                    2. prefix - для добавления префикса в uri
                    3. namespace - добавляет название в пространство имён
                    4. middleware - позволит проверить запрос по указанному классу middleware, перед передачей его в
                        метод контроллера
                    5. group - группирует роуты по совместным признакам
                    6. name - позволяет назначить имя роуту для дальнейшего обращения к нему
                    7. view - возвращает вид, куда можно вторым параметром передавать данные
                    8. redirect - перенаправляет по указанному пути.
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Requests</h4>
            <p>
                Позволяет получить экземпляр request'а в контроллере не используя при этом суперглобальные переменные.
                Данные из запроса получаем напрямую '->', либо через:<br><br>
                    input() - данные из формы<br>
                    file() - экземпляр класса UploadedFile<br>
                    get(), all() - получить конкретные данные, либо все<br>
                    only(), except() - получить данные только / за исключением<br>
                    has() - проверяет есть ли указанные данные в запросе.
            </p>
            <p>
                Можно создать отдельный класс request, которые наследует класс FormRequest и позволяет валидировать
                данные из формы. В методе rules() прописываются валидационные правила, а в методе messages() можно
                изменять сообщения об ошибках.
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Controllers</h4>
            <p>
                Отвечает за организационную логику проекта и используется вместо функции-замыкания в роутинге. Основная
                задача - понять кому какой запрос делегировать.
            </p>
            <p>
                Конструктор контроллера позволяет удобно получать обьекты нужных нам зависимостей, благодаря контейнеру
                внедрения зависимостей.
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Middleware</h4>
            <p>
                Это посредник, который позволяет проверить запрос ещё до того как он попадёт в контроллер. После такой
                проверки он может разрешить или запретить доступ к определённому ресурсу.
            </p>
            <p>
                Класс посредника находится в директории Middleware. Сама проверка запроса осуществляется в методе
                handle().
            </p>
            <p>
                Вызвать посредник можно через метод middleware(), параметром передать им'я класса, в конструкторе
                контроллера либо в самом роуте.
            </p>
            <p>
                Дополнительно можно задавать методы которые нужно или не нужно проверять: only(), except().
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Validation</h4>
            <p>
                Компонент, который позволяет проводить валидацию входных данных. Её можно задавать либо в контроллере,
                либо в классе запроса.
            </p>
            <p>
                Если в контроллере, то вызываем метод validate, куда первым параметром передаём обьект запроса, а вторым
                - массив с правилами валидации.
            </p>
            <p>
                Если в классе request'а, то возвращаем правила валидации из метода rules(), а в метода контроллера уже
                принимаем провалидированные данные в экземпляре этого класса.
            </p>
            <p>
                Самые распостранённые правила валидации:
            </p>
            <ul>
                <li>
                    min:0 / max:255 - минимальная и максимальная длина строки
                </li>
                <li>
                    integer - должно быть числом
                </li>
                <li>
                    string - ожидается строка
                </li>
                <li>
                    image - ожидается картинка
                </li>
                <li>
                    email - валидный email
                </li>
                <li>
                    file - успешно загруженный файл
                </li>
                <li>
                    date - валидная дата
                </li>
                <li>
                    accepted - дожно быть подтверждено
                </li>
                <li>
                    confirmed - два поля должны совпадать
                </li>
                <li>
                    nullable - поле не обязательное
                </li>
                <li>
                    exists:posts,title - проверяет, существует ли поле в таблице. Если не указать поле, то по умолчанию
                    будет использоваться атрибут name в input'е
                </li>
                <li>
                    unique:users,email - проверяет, уникальное ли поле в таблице. По умолч. - name в input'е
                </li>
                <li>
                    bail - остановка валидации после первого несоответствия.
                </li>
            </ul>
            <p>
                Валидационные сообщения хранятся в сессии и доступны из глобальной переменной $errors.
                Использование в виде: {{ $errors->first('name') }}.
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Blade</h4>
            <p>* - директивы начинаются с @</p>
            <ul>
                <li>
                    yield() - подключает секцию, если такая существует
                </li>
                <li>
                    include() - подключает файл. Вторым параметром можно передавать данные в него
                </li>
                <li>
                    section() endsection - секция, которая сама по себе не отобразится, но можно подключить через yield
                </li>
                <li>
                    section() show - секция, которая сразу же отобразится
                </li>
                <li>
                    parent - позволяет дописать в секцию, а не перезаписать её
                </li>
                <li>
                    csrf - скрытый input для защиты от csrf-атак
                </li>
                <li>
                    foreach() endforeach, forelse() endforelse, if elseif else endif, isset() endisset,
                </li>
                <li>
                    empty() endempty ... - управляющие конструкции
                </li>
                <li>
                    @{{ $var }} - екранированный вывод переменной
                </li>
                <li>
                    @{!! $var !!} - не екранировать вывод
                </li>
                <li>
                    php endphp - php-код.
                </li>
            </ul>
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Error Handling</h4>
            <p>
                Позволяет создавать ошибку через функцию abort(404) - первый параметр - номер ошибки второй
                (необязательный) - текст ошибки.
            </p>
            <p>
                Для изменения шаблона ошибки в /resources/views/errors создадим файл по номеру ошибки, например,
                404.blade.php.
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Artisan</h4>
            <p>
                Интерфейс командной строки. С помощью команды php artisan make: позволяет генерировать целые классы
                (контроллеры, модели, миграции, middleware, request и т.д. php artisan migrate: позволяет работать с
                миграциями.
            </p>
            <p>
                php artisan make:migration create_posts_table - создаст миграцию для таблицы posts
                php artisan migrate - запустит все миграции
                php artisan migrate:rollback - откатит миграции из последнего batch'а
                php artisan migrate:reset - откатит все миграции
                php artisan migrate:refresh - откатит все миграции и применит их заново.
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Migrations</h4>
            <p>Это механизм, позволяющий изменять структуру бд.</p>
            <p>
                Метод up() будет вызываться при создании миграции, а down() - при откате.
            </p>
            <p>
                Schema::create() - создание таблицы в методе up(). Первый параметр - название таблицы, второй -
                функция-замыкание, где указывается какие поля нужны в таблице.
            </p>
            <p>
                Schema::drop() или Schema::dropIfExists() - удаление таблицы в методе down(). Первый параметр - название
                таблицы.
            </p>
            <p>
                При переименовании таблицы в методе up() запишем:
                Schema::rename($from, $to) - переименование таблицы. Первый параметр - таблица, которую переименовать,
                второй - новое название таблицы. А в методе down() - наоборот.
            </p>
            <p>
                increments('id') - автоинкремент по id
                string('name') - строчное поле name, длиной 255
                integer('age') - числовое поле
                text('text') - строчное поле большой длины

                ->unsigned() - без знака
                ->default() - задаст значение по умолчанию
                ->nullable() - null будет по умолчанию
                ->unique() - в поле не должно быть дублей
                ->index() - задать индекс полю
                ->foreign() - внешний ключ для поля, который связывается с полем ->references() из таблицы ->on().
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Pagination</h4>
            <p>
                Пагинацию можно использовать на Query Builder или Eloquent-модели. Делается это вызовом paginate(),
                куда можно передать число, которое указывает сколько элементов отображать на странице.
            </p>
            <p>
                Сам переключатель пагинации вызывается в виде методом links() у обьекта модели: @{{$post->links() }}.
            </p>
            <p>
                Для получения возможности стилизовать пагинацию, вызовем функцию в консоли: php artisan vendor:publish,
                которая вытащит ресурсы из компонентов в папку views.
            </p>
            <p>
                Так же можно передавать переменные в вид: @{{  $posts->links('vendor.pagination.bootstrap-4', [
                'elements' => $posts ] }}
            </p>
            <p>
                По умолчанию присутствуют разные виды пагинации: bootstrap-4, simple-bootstrap-4, default,
                simple-default, semantic-ui
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Faker</h4>
            <p>
                Генерирует фэйковые данные и позволяет наполнять ими таблицы. Для этого нужно Eloquent-модель и в
                /database/factories определить какие данные в какие поля наполнять.
            </p>
            <p>
                Для запуска наполнения таблицы вызовем метод define(), куда первым параметром передадим название
                модели, а вторым - количество записей для наполнения. И всё это дополним вызовом метода ->create().
            </p>
            <p>
                Для генерации данных используется экземпляр класса Faker, у которого вызываются нужные методы: name(),
                text(), image(), date(), slug(), unique() и т.д.
            </p>
        </div>
        <div class="documentation__method-item">
            <h4>Helpers</h4>
            <p>Функции-помощники, которые используются в работе:</p>
            <ul>
                <li>auth - возвращает экземпляп аутентифицированного пользователя</li>
                <li>view - получает экземпляр класса вида</li>
                <li>route - получает url роута по его названию</li>
                <li>dd - вывод и остановка выполнения скрипта</li>
                <li>bcrypt - хеш-функция</li>
                <li>env - возвращает значение из переменной окружения</li>
                <li>config - возвращает значение из переменной конфига</li>
                <li>factory - создаёт faсtory builder из модели</li>
                <li>abort - возвращает http-исключение</li>
                <li>asset - получает url к ресурсу</li>
                <li>collect - создаёт экземпляр коллекции из массива</li>
                <li>csrf_field - возвращает скрытое поле с csrf-токеном</li>
                <li>csrf_token - возвращает csrf-токен</li>
                <li>old - возвращает предыдущие данные, введённые пользователем</li>
                <li>redirect - редиректит пользователя на указанную страницу</li>
                <li>str_limit - задаёт лимит символов в строке</li>
                <li>str_slug - переводит строку в подходящую для url</li>
                <li>storage_path - возвращает полный путь к директории storage</li>
                <li>public_path - возвращает полный путь к директории public</li>
                <li>back - возвращает пользователя на предыдущую страницу</li>
            </ul>
        </div>
        <div class="documentation__method-item">
            <h4>Collections</h4>
            <p>Это обёртка для работы с массивами. Хелпер collect создаст из массива экземпляр класса Collection</p>
            <p>Основные методы для работы с коллекциями (вызываются из экземпляра класса Collection):</p>
            <ul>
                <li>map - вызывает callback-функцию, которая применяется ко всем элементам коллекции</li>
                <li>filter - позволяет получить отфильтрованные элементы из коллекции</li>
                <li>reject - извлекает элементы из коллекции</li>
                <li>pluck - возвращает все значения по заданным ключам</li>
                <li>contains - проверяет содержится ли указанный элемент в коллекции</li>
                <li>avg - возвращает среднее значение из коллекции</li>
                <li>count - считает количество элементов коллекции</li>
                <li>concat - конкатенирует коллекции</li>
                <li>combine - обьеденяет коллекцию из массивов в один</li>
                <li>max - возвращает максимальное значение из коллекции</li>
                <li>min - возвращает минимальное значение из коллекции</li>
                <li>all - возвращает массив элементов из коллекции</li>
                <li>diff - возвращает значения из первой коллекции, которых нету у второй коллекции</li>
                <li>every - проверяет, соответствует ли каждый элемент заданному условию</li>
                <li>only - возвращает элементы из коллекции по заданным ключам</li>
                <li>except - возвращает коллекцию, с элементами, кроме указанных ключей</li>
                <li>first - возвращает первый элемент из коллекции. Можно задавать условия</li>
                <li>last - возвращает последний элемент из коллекции. Можно задавать условия</li>
                <li>flip - меняет местами ключи со значениями в коллекции</li>
                <li>has - проверяет, существует ли данный ключ в коллекции</li>
                <li>get - возвращает значение из коллекции по указанному ключу</li>
                <li>keys - возвращает ключи из коллекции</li>
                <li>pop - извлекаем последний элемент из коллекции и возвращает его</li>
                <li>intersect - возвращает совместные элементы из двух коллекций. Ключи берутся с первой коллекции</li>
                <li>preped - добавляет элемент в начало коллекции</li>
                <li>push - добавляет элемент в конец коллекции</li>
                <li>pull - вытаскивает элемент из коллекции по ключу</li>
                <li>sort - сортирует элементы коллекции</li>
                <li>toArray - конвертирует коллекцию в массив</li>
                <li>toJson - конвертирует коллекцию в JSON-формат</li>
            </ul>
        </div>
        <div class="documentation__method-item">
            <h4>Eloquent ORM</h4>
            <p>
                Реализация Active Record в Laravel, где для каждой таблице соответствует своя модель, для работы с ней.
            </p>
            <p>
                all() - возвращает все записи из таблицы в виде коллекции<br>
                find($id) - возвращаеь определённую запись из таблицы как экземпляр класса модели<br>
                first() - возвращает первый экземпляр модели<br>
                where('id', $id)->get() - возвращает коллекцию по заданному условию<br>
                Если бы вместо get() было first(), то возвратился бы экземпляр класса модели<br>
            </p>
            <p>
                Записать данные можно через create(), куда передать массив с данными. Либо можно записать напрямую,
                обращаясь к каждому свойству модели, после чего у модели вызвать метод save().
            </p>
            <p>
                Для первого случая нужно указать в моделе свойство $fillable, которое будет содержать массив с названием
                тех полей, которые могут быть заполнены. Любые другие поля будет невозможно заполнить.
            </p>
            <p>
                Свойство $guarded - обратное к $fillable, тоесть позволяет указать поля, которые нельзя будет заполнить,
                причём все остальные могут быть заполнеными. Пустое свойство значит, что все поля не будут защищены.
            </p>
            <p>
                В свойстве $table можно указать название таблицы, хоть оно определяется автоматически
            </p>
            <p>
                Связи между сущностями можно делать с помощью методов: belongsTo(), hasOne(), hasMany(), куда нужно
                передать название той модели, с которой нужно связаться. Далее можно просто доставать из одной молели
                необходимые данные другой модели, обращаясь к связующему методу без скобок.
            </p>
            <p>
                Например: $user->posts - используем метод posts() модели User, который определяет связь один ко многим.
                Таким образом получим коллекцию обьектов постов конкретного юзера.
            </p>
            <p>
                В данной работе реализована связь один ко многим между категориями и постами.
            </p>
        </div>
    </div>
@endsection
